"""
Welcome!
To start the game, press 'Run' in the left corner
Controls: arrow keys, spacebar
Enjoy, hope you have fun!

Made by: Darius Burinskis (aka DevBDarius)
Art assets by: Kim Lathrop
OST by: Zabutom




---
VERSION LOG:
v1.0
RELEASE BETA: Coursera specs fully done now + bonus animations

v0.9
RELEASE ALPHA: basic mechanics implemented fully, like:
    collisions
    rock spawns
    ship gun
    scores/lives

v0.8
Bug fixes
    
v0.7
added original OST by Zabutom
added music time handler (music now repeats normally)
synced asteroid spawn with music

"""

# program template for Spaceship
import simplegui
import math
import random

# globals for user interface
WIDTH = 800
HEIGHT = 600
score = 0
lives = 0
time = 0
started = False

# object groups
rock_group = set([])
missile_group = set([])
explosion_group = set([])

# difficulty globals
diff_medium = False
diff_hard = False

class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.f2014.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 22)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

# sound assets purchased from sounddogs.com, please do not redistribute
UI_soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(0)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

# alternative upbeat soundtrack by composer and former IIPP student Emiel Stopler
# please do not redistribute without permission from Emiel at http://www.filmcomposer.nl
#soundtrack = simplegui.load_sound("https://storage.googleapis.com/codeskulptor-assets/ricerocks_theme.mp3")


#######
# MY ASSETS
#######
soundtrack = simplegui.load_sound("https://www.dropbox.com/s/ac5ntj6ks8ahhzi/zabutom%20-%20blast%20off%20into%20space.weba?dl=1")
soundtrack.set_volume(.8)
#BPM 136.25, 0.44036 SPB (seconds per beat)

# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)


# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        # Keeps track of sound/thrusting image
        self.sound_started = False
        
    def get_position(self):
        return self.pos
    
    def get_radius(self):
        return self.radius
        
    def draw(self,canvas):
        canvas.draw_image(self.image, self.image_center, self.image_size,
                          self.pos, self.image_size, self.angle)

    def update(self):     
        # position
        for dim in range(2):
            self.pos[dim] += self.vel[dim]
            
        # keep ship on the screen
        if self.pos[0] < 0:
            self.pos[0] += WIDTH
        elif self.pos[0] > WIDTH:
            self.pos[0] -= WIDTH
        if self.pos[1] < 0:
            self.pos[1] += HEIGHT
        if self.pos[1] > HEIGHT:
            self.pos[1] -= HEIGHT

        # angle
        self.angle += self.angle_vel
        
        # acceleration
        accel = 0.15
        vector = angle_to_vector(self.angle)
        if self.thrust:
            # Add acceleration
            for dim in range(2):
                self.vel[dim] += accel * vector[dim]
            if not self.sound_started:
                # start thrusting sound/image
                ship_thrust_sound.play()
                self.image_center[0] = 135
                self.sound_started = True
        else:
            if self.sound_started:
                #stop thrusting sound/image
                ship_thrust_sound.rewind()
                self.image_center[0] = 45
                self.sound_started = False
        # friction
        friction = 1 + accel * 0.1
        for dim in range(2):
            self.vel[dim] /= friction
            
    def start_rotation(self, increase):
        vel = 0.1
        if increase:
            self.angle_vel = vel
        else:
            self.angle_vel = -vel
            
    def stop_rotation(self):
        self.angle_vel = 0
    
    def start_thrust(self):
        self.thrust = True
        
    def stop_thrust(self):
        self.thrust = False
        
    def shoot(self):
        #calculate missile position, velocity; spawn it and add to group
        global a_missile
        vel = angle_to_vector(self.angle)
        pos = [0, 0]
        speed = 10
        for dim in range(2):
            pos[dim] = self.pos[dim] + vel[dim] * self.image_center[1]
        for dim in range(2):
            vel[dim] = self.vel[dim] + vel[dim] * speed
            
        missile_group.add(Sprite(pos, vel, 0, 0,
                                 missile_image, missile_info, missile_sound))
            
# Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
            
    def get_position(self):
        return self.pos
    
    def get_radius(self):
        return self.radius

   
    def draw(self, canvas):
        #24 images
        canvas.draw_image(self.image, self.image_center, self.image_size,
                          self.pos, self.image_size, self.angle)
        if self.animated:
            self.image_center[0] = math.floor(self.age) * self.image_size[0] + 0.5 * self.image_size[0]
            self.age = (self.age - 0.5) % self.lifespan
            #remember, age is also updated in "update"

    
    #update position/angle of sprite; check age and return True if age exceeds lifespan
    def update(self):
        # keep sprite on the screen
        if self.pos[0] < 0:
            self.pos[0] += WIDTH
        elif self.pos[0] > WIDTH:
            self.pos[0] -= WIDTH
        if self.pos[1] < 0:
            self.pos[1] += HEIGHT
        if self.pos[1] > HEIGHT:
            self.pos[1] -= HEIGHT
        
        for dim in range(2):
            self.pos[dim] += self.vel[dim]
        self.angle += self.angle_vel
        self.age += 1
        if self.age >= self.lifespan:
            return True
        else:
            return False
            
        
    def __str__(self):
        return "Asteroid, pos : " + str(self.pos)
    
    # returns True if distance between objects is smaller than their radius
    def collide(self, object):
        return dist(self.pos, object.get_position()) < self.radius + object.get_radius()
    
# Group-object collision
def group_collide(group, object):
    global explosion_group
    for other_object in set(group):
        if other_object.collide(object):
            group.remove(other_object)
            explosion_group.add(Sprite(object.get_position(), [0,0], 0, 0, explosion_image, explosion_info, explosion_sound))
            return True
    return False

# Group-group collision
def group_group_collide(group1, group2):
    collisions = 0
    for obj1 in set(group1):
        if group_collide(group2, obj1):
            collisions += 1
            group1.remove(obj1)
    return collisions

           
def draw(canvas):
    global time, score, lives, rock_group, missile_group, explosion_group, started, timer, diff_medium, diff_hard
    
    # animate background
    time += 1
    wtime = (time / 4) % WIDTH
    center = debris_info.get_center()
    size = debris_info.get_size()
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))

    # draw ship
    my_ship.draw(canvas)
    my_ship.update()
    
    # update/draw asteroids/missiles
    process_sprite_group(rock_group, canvas)
    process_sprite_group(missile_group, canvas)
    process_sprite_group(explosion_group, canvas)                                
    
    
    # check for asteroid-ship collisions
    if group_collide(rock_group, my_ship):
        lives -= 1
        
    # check for asteroid-missile collisions
    score += group_group_collide(rock_group, missile_group)
        
    
    

    # Score, lives
    score_pos = [WIDTH * 0.1, HEIGHT * 0.1]
    lives_pos = [score_pos[0], score_pos[1] + 35]
    canvas.draw_text("Score : " + str(score), score_pos, 20, "White", "monospace")
    canvas.draw_text("Lives : " + str(lives), lives_pos, 20, "White", "monospace")
    
    #TEST: see amount of all objects
#    asteroids_pos = [score_pos[0], score_pos[1] + 70]
#    canvas.draw_text("Asteroids : " + str(len(rock_group)), asteroids_pos, 20, "White", "monospace")
#    missile_pos = [score_pos[0], score_pos[1] + 105]
#    canvas.draw_text("Missiles : " + str(len(missile_group)), missile_pos, 20, "White", "monospace")
#    explosion_pos = [score_pos[0], score_pos[1] + 140]
#    canvas.draw_text("Explosions : " + str(len(explosion_group)), explosion_pos, 20, "White", "monospace")

    
    # draw splash screen if not started
    if not started:
        canvas.draw_image(splash_image, splash_info.get_center(), 
                          splash_info.get_size(), [WIDTH / 2, HEIGHT / 2], 
                          splash_info.get_size())
    
    # when you lose you don't get a pie    
    if lives == 0:
        started = False
        rock_group = set([])
        timer.stop()
        timer2.stop()
        
        soundtrack.rewind()
        UI_soundtrack.play()
        
    # difficulty algorithm - double asteroid spawn rate
    if score == 30:
        if not diff_medium:
            update_timer(440.35)
            diff_medium = True
    if score == 60:
         if not diff_hard:
            update_timer(220.175)
            diff_hard = True


    
    

# Keyboard handlers
def keydown(key):
    if key == simplegui.KEY_MAP['left']:
        my_ship.start_rotation(False)
    elif key == simplegui.KEY_MAP['right']:
        my_ship.start_rotation(True)
    elif key == simplegui.KEY_MAP['up']:
        my_ship.start_thrust()
    elif key == simplegui.KEY_MAP['space']:
        my_ship.shoot()
        
def keyup(key):
    if key == simplegui.KEY_MAP['left'] or key == simplegui.KEY_MAP['right']:
        my_ship.stop_rotation()
    elif key == simplegui.KEY_MAP['up']:
        my_ship.stop_thrust()
        
# mouseclick handler that resets UI and conditions whether splash image is drawn
def click(pos):
    global started, lives, score, timer, timer2
    center = [WIDTH / 2, HEIGHT / 2]
    size = splash_info.get_size()
    inwidth = (center[0] - size[0] / 2) < pos[0] < (center[0] + size[0] / 2)
    inheight = (center[1] - size[1] / 2) < pos[1] < (center[1] + size[1] / 2)
    if (not started) and inwidth and inheight:
        global my_ship, a_rock, a_rock2, a_missile
        #stop playing old music
        UI_soundtrack.rewind()        

        #start spawning rocks and playing music and shit
        timer = simplegui.create_timer(880.7, rock_spawner)
        timer.start()

        timer2.start()
        soundtrack.play()
        missile_sound.set_volume(.7)
        
        lives = 3
        score = 0

        started = True    
        
# timer handler that spawns a rock    
def rock_spawner():
    global rock_group, my_ship
    #initialize and randomise asteroid parameters
    loc = [random.randrange(WIDTH), random.randrange(HEIGHT)]
    vel = [random.random() * 1.5, random.random() * 1.5]
    angle = random.randrange(6)
    angle_vel = random.random() * 0.1
    
    randoms = [vel[0], vel[1], angle_vel]
    
    for i in range(3):
        if random.randrange(2):
            randoms[i] = - randoms[i]
    
    # remove a rock if there is too much
    if len(rock_group) > 50:
        rock_group.pop()
    
    # create and add a new rock to rock set - if close to the ship, ignore
    p = my_ship.get_position()
    if not (loc[0] - 100 < p[0] < loc[0] + 100 and loc[1] - 100 < p[1] < loc[1] + 100):
        rock_group.add(Sprite(loc, [randoms[0], randoms[1]],
                            angle, randoms[2], asteroid_image, asteroid_info))

    

# helper func. for drawing/updating sprites
def process_sprite_group(a_set, canvas):
    for sprite in set(a_set):
        if sprite.update():
            a_set.remove(sprite)
        else:
            sprite.draw(canvas)
    
# timer handler for music
def music_timer():
    soundtrack.rewind()
    soundtrack.play()
    
# update timer interval
def update_timer(interval):
    global timer
    timer.stop()
    timer = simplegui.create_timer(interval, rock_spawner)
    timer.start()

    
# initialize frame
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)

# initialize ship and two sprites
my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, ship_image, ship_info)
a_rock = Sprite([WIDTH, HEIGHT], [5, 5], 0, 0, asteroid_image, asteroid_info)
a_missile = Sprite([WIDTH, HEIGHT], [5, 5],
                   0, 0, missile_image, missile_info, missile_sound)

# register handlers
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.set_mouseclick_handler(click)

# timers: rock spawner and music
timer = simplegui.create_timer(880.7, rock_spawner)
timer2 = simplegui.create_timer(108000.0, music_timer)

# get things rolling
frame.start()
UI_soundtrack.play()

